name: Playwright Crossbrowsers Tests

'on':
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  Custom_Linux_Grid:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Setup Node.js env
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Step 3: Install Yarn (if not installed)
      - name: Install Yarn
        run: |
          npm install -g yarn
          yarn install
          yarn add playwright
          yarn add typescript ts-node @types/node

      # Step 4: Install Playwright Browsers
      - name: Install Playwright Browsers
        run: yarn playwright install --with-deps

      # Step 5: Compile TypeScript
      - name: Compile TypeScript
        run: yarn tsc


      # Step 6: Ensure Playwright Artifacts exists
      - name: Ensure Playwright Artifacts Directory Exists
        run: |
             mkdir -p test-results

      # Step 7: Run Playwright Tests across all browsers in parallel
      - name: Run Playwright Tests across all browsers
        run: |
          echo "Running tests on all browsers: Chromium, Firefox, and WebKit (Edge)"
          
          # Run tests across all browsers in parallel using the `projects` configuration
          # The `&` operator runs these commands in parallel, and `wait` ensures that they all finish before continuing
          xvfb-run -a yarn playwright test --project=chromium  --reporter=html --output=test-results/chromium &   # Chromium
          xvfb-run -a yarn playwright test --project=firefox   --reporter=html --output=test-results/firefox &   # Firefox
          xvfb-run -a yarn playwright test --project=webkit    --reporter=html --output=test-results/webkit &   # WebKit (Edge)
          wait  # Wait for all browsers to finish running

      # Step 8: Confirm Playwright artifacts generation
      - name: List Playwright artifacts
        run: |
          echo "Listing the contents of test-results/playwright-report:"
          ls -R test-results

      # Step 9: Wait for the test results to generate (optional)
      - name: Wait for the test results to generate
        run: |
          sleep 10  # Adjust time as needed to ensure reports are written
      
      # Step 10: Upload Playwright Reports as Pipeline Artifact
      - name: Upload Playwright Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Playwright_Report
          path: test-results/playwright-report/

      # Step 11: Upload Playwright Report HTML Chrome as Pipeline Artifact
      - name: Upload Playwright Report HTML as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Playwright_Report_HTML_Chromium
          path: test-results/chromium/index.html

      # Step 12: Upload Playwright Report HTML Firefox as Pipeline Artifact
      - name: Upload Playwright Report HTML as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Playwright_Report_HTML_Firefox
          path: test-results/firefox/index.html

      # Step 13: Upload Playwright Report HTML Webkit as Pipeline Artifact
      - name: Upload Playwright Report HTML as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Playwright_Report_HTML_Webkit
          path: test-results/webkit/index.html

      # Step 14: Upload Playwright Test Results (Optional)
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Playwright_Test_Results
          path: test-results